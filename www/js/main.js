// Generated by CoffeeScript 1.4.0
(function() {
  var CSSBox, animate, boxs, camera, controls, createDungeon, createTower, createWall, init, onClick, renderer, scene, state;

  CSSBox = (function() {

    function CSSBox(width, height, depth, scene) {
      var face, i, material, s, _i;
      this.position = THREE.Vector3(0, 0, 0);
      this.rotation = THREE.Vector3(0, 0, 0);
      this.setup = [
        {
          position: new THREE.Vector3(-width / 2, 0, 0),
          rotation: new THREE.Vector3(0, Math.PI / 2, 0),
          color: new THREE.Color(0x333333).getStyle(),
          width: depth,
          height: height
        }, {
          position: new THREE.Vector3(width / 2, 0, 0),
          rotation: new THREE.Vector3(0, -Math.PI / 2, 0),
          color: new THREE.Color(0x888888).getStyle(),
          width: depth,
          height: height
        }, {
          position: new THREE.Vector3(0, height / 2, 0),
          rotation: new THREE.Vector3(Math.PI / 2, 0, Math.PI),
          color: new THREE.Color(0x555555).getStyle(),
          width: width,
          height: depth
        }, {
          position: new THREE.Vector3(0, -height / 2, 0),
          rotation: new THREE.Vector3(-Math.PI / 2, 0, Math.PI),
          color: new THREE.Color(0x666666).getStyle(),
          width: width,
          height: depth
        }, {
          position: new THREE.Vector3(0, 0, depth / 2),
          rotation: new THREE.Vector3(0, Math.PI, 0),
          color: new THREE.Color(0x777777).getStyle(),
          width: width,
          height: height
        }, {
          position: new THREE.Vector3(0, 0, -depth / 2),
          rotation: new THREE.Vector3(0, 0, 0),
          color: new THREE.Color(0x444444).getStyle(),
          width: width,
          height: height
        }
      ];
      this.materials = [];
      this.faces = [];
      for (i = _i = 0; _i < 6; i = _i += 1) {
        s = this.setup[i];
        material = document.createElement('div');
        material.style.width = s.width + 'px';
        material.style.height = s.height + 'px';
        material.style.background = s.color;
        this.materials.push(material);
        face = new THREE.CSS3DObject(this.materials[i]);
        face.rotation = s.rotation;
        face.position = s.position;
        this.faces[i] = face;
      }
      if (scene !== void 0) {
        this.attach(scene);
      }
      return;
    }

    CSSBox.prototype.attach = function(scene) {
      var i, _i;
      for (i = _i = 0; _i < 6; i = _i += 1) {
        scene.add(this.faces[i]);
      }
    };

    CSSBox.prototype.detach = function(scene) {
      var i, _i;
      for (i = _i = 0; _i < 6; i = _i += 1) {
        scene.remove(this.faces[i]);
      }
    };

    CSSBox.prototype.explode = function(instant, radius) {
      var f, i, s, v, xOffset, yOffset, _i;
      if (instant == null) {
        instant = false;
      }
      if (radius == null) {
        radius = 3000;
      }
      for (i = _i = 0; _i < 6; i = _i += 1) {
        f = this.faces[i];
        s = this.setup[i];
        v = new THREE.Vector3(0, 0, 0);
        v.add(s.position);
        v.add(this.position);
        yOffset = Math.sin(s.rotation.x) * radius;
        xOffset = -Math.sin(s.rotation.y) * radius;
        v.y += yOffset;
        v.x += xOffset;
        if (i === 5) {
          v.z += -Math.cos(s.rotation.x) * radius;
        }
        if (i === 4) {
          v.z += Math.cos(s.rotation.x) * radius;
        }
        if (instant) {
          f.position = v;
        } else {
          TweenLite.to(f.position, 1.5, {
            x: v.x,
            y: v.y,
            z: v.z,
            ease: Quad.easeOut,
            delay: 1.3 * Math.random()
          });
        }
      }
    };

    CSSBox.prototype.recompose = function() {
      var f, i, s, v, _i;
      for (i = _i = 0; _i < 6; i = _i += 1) {
        f = this.faces[i];
        s = this.setup[i];
        v = new THREE.Vector3(0, 0, 0);
        v.add(s.position);
        v.add(this.position);
        TweenLite.to(f.position, .5, {
          x: v.x,
          y: v.y,
          z: v.z,
          delay: Math.random() * 1.3,
          ease: Quad.easeOut
        });
      }
    };

    CSSBox.prototype.setPosition = function(pos) {
      var f, i, s, v, _i;
      this.position = pos;
      for (i = _i = 0; _i < 6; i = _i += 1) {
        f = this.faces[i];
        s = this.setup[i];
        v = new THREE.Vector3(0, 0, 0);
        v.add(s.position);
        v.add(this.position);
        f.rotation = s.rotation;
        f.position = v;
      }
    };

    return CSSBox;

  })();

  camera = null;

  scene = null;

  renderer = null;

  controls = null;

  boxs = [];

  state = "construct";

  init = function() {
    var i, j, wall, _i, _j;
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
    camera.position.set(0, 1000, 1000);
    controls = new THREE.TrackballControls(camera);
    controls.rotateSpeed = 1.0;
    controls.zoomSpeed = 1.0;
    controls.panSpeed = 0.8;
    controls.noZoom = false;
    controls.noPan = false;
    controls.staticMoving = false;
    controls.dynamicDampingFactor = 0.3;
    scene = new THREE.Scene();
    for (i = _i = -1; _i <= 1; i = _i += 1) {
      for (j = _j = -1; _j <= 1; j = _j += 1) {
        if (i === 0 && j === 0) {
          createDungeon(0, 0, 0);
        } else if (i === 0) {
          wall = new CSSBox(50, 150, 660, scene);
          wall.setPosition(new THREE.Vector3(j * 400, -75, 0));
          boxs.push(wall);
        } else if (j === 0) {
          wall = new CSSBox(660, 150, 50, scene);
          wall.setPosition(new THREE.Vector3(0, -75, i * 400));
          boxs.push(wall);
        } else {
          createTower(i * 400, 0, j * 400);
        }
      }
    }
    renderer = new THREE.CSS3DRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.domElement.style.position = 'absolute';
    renderer.domElement.style.top = 0;
    renderer.domElement.style.left = 0;
    document.body.appendChild(renderer.domElement);
    return window.addEventListener('click', onClick);
  };

  onClick = function(e) {
    var box, _i, _j, _len, _len1;
    console.log("click");
    e.preventDefault();
    if (state === "construct") {
      for (_i = 0, _len = boxs.length; _i < _len; _i++) {
        box = boxs[_i];
        box.explode();
      }
      return state = "explode";
    } else {
      for (_j = 0, _len1 = boxs.length; _j < _len1; _j++) {
        box = boxs[_j];
        box.recompose();
      }
      return state = "construct";
    }
  };

  createDungeon = function(x, y, z) {};

  createWall = function(x, y, z) {};

  createTower = function(x, y, z) {
    var base, creneau, i, j, plateform, _i, _results;
    base = new CSSBox(140, 300, 140, scene);
    base.setPosition(new THREE.Vector3(x, y, z));
    boxs.push(base);
    plateform = new CSSBox(200, 50, 200, scene);
    plateform.setPosition(new THREE.Vector3(x, y + 175, z));
    boxs.push(plateform);
    _results = [];
    for (i = _i = -1; _i <= 1; i = _i += 1) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = -1; _j <= 1; j = _j += 1) {
          if (i === 0 && j === 0) {
            continue;
          }
          creneau = new CSSBox(40, 40, 40, scene);
          creneau.setPosition(new THREE.Vector3(x + i * 80, y + 220, z + j * 80));
          _results1.push(boxs.push(creneau));
        }
        return _results1;
      })());
    }
    return _results;
  };

  animate = function() {
    requestAnimationFrame(animate);
    controls.update();
    return renderer.render(scene, camera);
  };

  init();

  animate();

}).call(this);
